local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Settings for AimLock, BulletTrace, Airshot, and Dot
local Settings = {
    AimLock = {
        Enabled = false,
        AimLockKey = Enum.KeyCode.Q,
        Prediction = 0.2,
        AirshotPredictionMultiplier = 1.5,
        AimPart = "HumanoidRootPart",
        NotificationDuration = 2,
        ChanceHitPrediction = 0.8,
        HighChanceThreshold = 0.9,
        HitChance = 0.7,
        Mode = "Legit" -- Default mode
    },
    BulletTrace = {
        Enabled = true,
        Color = Color3.fromRGB(255, 0, 0),
        Thickness = 2,
        LineCount = 20,
        LineLength = 100
    },
    Airshot = {
        Enabled = true,
        BasePrediction = 0.1,
        AirshotAccuracyFactor = 1.2
    },
    DotSettings = {
        Enabled = true,
        DotColor = Color3.fromRGB(255, 0, 0),
        DotRadius = 5
    }
}

-- Create ScreenGui and UI elements
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "Nerverias.shhh test"
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 450, 0, 450)
mainFrame.Position = UDim2.new(0.5, -150, 0.5, -250)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Name = "ScrollingFrame"
scrollingFrame.Size = UDim2.new(1, -20, 1, -60)
scrollingFrame.Position = UDim2.new(0, 10, 0, 50)
scrollingFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
scrollingFrame.BorderSizePixel = 0
scrollingFrame.ScrollBarThickness = 8
scrollingFrame.Parent = mainFrame

-- Define buttonSpacing and modes
local buttonSpacing = 50
local modes = { "Legit", "Smooth", "Vertical" }

local title = Instance.new("TextLabel")
title.Name = "Title"
title.Size = UDim2.new(1, 0, 0, 40)
title.Position = UDim2.new(0, 0, 0, 0)
title.Text = "Nerverias.shhh test"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextScaled = true
title.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
title.Parent = scrollingFrame

local modeLabel = Instance.new("TextLabel")
modeLabel.Name = "ModeLabel"
modeLabel.Size = UDim2.new(0, 200, 0, 30)
modeLabel.Position = UDim2.new(0, 25, 0, buttonSpacing * (#modes + 1))
modeLabel.Text = "Mode: " .. Settings.AimLock.Mode
modeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
modeLabel.TextScaled = true
modeLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
modeLabel.Parent = scrollingFrame

-- Create Mode Buttons
for i, mode in ipairs(modes) do
    local modeButton = Instance.new("TextButton")
    modeButton.Name = mode .. "Button"
    modeButton.Size = UDim2.new(0, 100, 0, 40)
    modeButton.Position = UDim2.new(0, 25, 0, buttonSpacing * i)
    modeButton.Text = mode
    modeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    modeButton.TextScaled = true
    modeButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    modeButton.Parent = scrollingFrame

    modeButton.MouseButton1Click:Connect(function()
        Settings.AimLock.Mode = mode
        modeLabel.Text = "Mode: " .. Settings.AimLock.Mode
        ApplyModeSettings(Settings.AimLock.Mode)
    end)
end

-- Create TextBoxes and Labels for Settings
local settingsLabels = {
    { Name = "HitChance", Text = "Hit Chance: " },
    { Name = "HighChanceThreshold", Text = "High Chance Threshold: " },
    { Name = "ChanceHitPrediction", Text = "Chance Hit Prediction: " },
    { Name = "AirshotPrediction", Text = "Airshot Prediction: " },
    { Name = "BasePrediction", Text = "Base Prediction: " },
    { Name = "AirshotAccuracyFactor", Text = "Airshot Accuracy Factor: " }
}

local textBoxes = {}

for i, labelInfo in ipairs(settingsLabels) do
    local label = Instance.new("TextLabel")
    label.Name = labelInfo.Name .. "Label"
    label.Size = UDim2.new(0, 200, 0, 30)
    label.Position = UDim2.new(0, 25, 0, buttonSpacing * (#modes + 2 + i - 1))
    label.Text = labelInfo.Text .. tostring(Settings.AimLock[labelInfo.Name] or Settings.Airshot[labelInfo.Name] or "Not Set")
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextScaled = true
    label.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    label.Parent = scrollingFrame

    local textBox = Instance.new("TextBox")
    textBox.Name = labelInfo.Name .. "TextBox"
    textBox.Size = UDim2.new(0, 80, 0, 30)
    textBox.Position = UDim2.new(0, 200, 0, buttonSpacing * (#modes + 2 + i - 1))
    textBox.Text = tostring(Settings.AimLock[labelInfo.Name] or Settings.Airshot[labelInfo.Name])
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.TextScaled = true
    textBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    textBox.Parent = scrollingFrame

    textBox.Changed:Connect(function(property)
        if property == "Text" then
            local value = tonumber(textBox.Text)
            if value then
                Settings.AimLock[labelInfo.Name] = value
                Settings.Airshot[labelInfo.Name] = value
                label.Text = labelInfo.Text .. tostring(value)
            end
        end
    end)

    textBoxes[labelInfo.Name] = textBox
end

-- Create Toggle Button
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0, 100, 0, 40)
toggleButton.Position = UDim2.new(0.5, -50, 0, 10)
toggleButton.Text = "Hide"
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.TextScaled = true
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 150)
toggleButton.Parent = screenGui

toggleButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
    toggleButton.Text = mainFrame.Visible and "Hide" or "Show"
end)

-- Create No Crash Button
local noCrashButton = Instance.new("TextButton")
noCrashButton.Name = "NoCrashButton"
noCrashButton.Size = UDim2.new(0, 100, 0, 40)
noCrashButton.Position = UDim2.new(0.5, -50, 0, 60)
noCrashButton.Text = "No Crash"
noCrashButton.TextColor3 = Color3.fromRGB(255, 255, 255)
noCrashButton.TextScaled = true
noCrashButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
noCrashButton.Parent = screenGui

noCrashButton.MouseButton1Click:Connect(function()
    -- Simulate ping reduction
    local player = Players.LocalPlayer
    local playerPing = player.PlayerGui:FindFirstChild("Ping")
    
    if playerPing and playerPing.Text and tonumber(playerPing.Text) > 250 then
        local reducedPing = math.random(50, 150)
        playerPing.Text = tostring(reducedPing)
        print("Ping reduced to " .. reducedPing)
    else
        print("Ping already low.")
    end
end)

-- Functions for AimLock and shooting
local function AimAtTarget(target)
    if target and target.Character and target.Character:FindFirstChild(Settings.AimLock.AimPart) then
        local targetPart = target.Character[Settings.AimLock.AimPart]
        local predictedPosition

        -- Calculate airshot prediction if enabled
        local airshotPrediction = Settings.Airshot.Enabled and CalculateAirshotPrediction(Settings.AimLock.ChanceHitPrediction) or Settings.AimLock.Prediction

        -- Predict the target's position based on movement and prediction settings
        if target.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            local randomness = 0
            if Settings.AimLock.Mode == "Legit" then
                randomness = math.random() * 0.5
            end

            predictedPosition = targetPart.Position + (targetPart.Velocity * (airshotPrediction + randomness))
        else
            predictedPosition = targetPart.Position + (targetPart.Velocity * airshotPrediction)
        end

        -- Smoothly transition the camera towards the predicted position
        local targetCFrame = CFrame.new(Camera.CFrame.Position, predictedPosition)
        Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, 0.1) -- Smooth transition

        -- Create bullet trace
        createLineTrace(Camera.CFrame.Position, predictedPosition)

        -- Simulate shooting based on hit chance
        if ChanceHit() then
            print("Hit at:", predictedPosition)
            -- Add actual shooting logic here
        else
            print("Missed shot at:", predictedPosition)
        end
    end
end

local function createLineTrace(startPosition, endPosition)
    if Settings.BulletTrace.Enabled then
        local trace = Instance.new("Part")
        trace.Size = Vector3.new(Settings.BulletTrace.Thickness, Settings.BulletTrace.Thickness, (startPosition - endPosition).magnitude)
        trace.CFrame = CFrame.new(startPosition, endPosition) * CFrame.new(0, 0, -trace.Size.Z / 2)
        trace.BrickColor = BrickColor.new(Settings.BulletTrace.Color)
        trace.Anchored = true
        trace.CanCollide = false
        trace.Material = Enum.Material.SmoothPlastic
        trace.Parent = Workspace
        Debris:AddItem(trace, 0.1) -- Remove trace after 0.1 seconds
    end
end

local function CalculateAirshotPrediction(chanceHitPrediction)
    return Settings.Airshot.BasePrediction * Settings.Airshot.AirshotAccuracyFactor
end

local function ChanceHit()
    return math.random() < Settings.AimLock.HitChance
end

-- Key input listener for AimLock
UserInputService.InputBegan:Connect(function(input, processed)
    if not processed then
        if input.KeyCode == Settings.AimLock.AimLockKey then
            Settings.AimLock.Enabled = not Settings.AimLock.Enabled
            print("AimLock " .. (Settings.AimLock.Enabled and "Enabled" or "Disabled"))
            if Settings.AimLock.Enabled then
                -- Automatically aim at the closest target
                local closestTarget = nil
                local shortestDistance = math.huge

                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(Settings.AimLock.AimPart) then
                        local targetPart = player.Character[Settings.AimLock.AimPart]
                        local distance = (Camera.CFrame.Position - targetPart.Position).magnitude

                        if distance < shortestDistance then
                            closestTarget = player
                            shortestDistance = distance
                        end
                    end
                end

                if closestTarget then
                    AimAtTarget(closestTarget)
                end
            end
        end
    end
end)

-- RunService render step
RunService.RenderStepped:Connect(function()
    if Settings.AimLock.Enabled then
        -- Automatically aim at the closest target
        local closestTarget = nil
        local shortestDistance = math.huge

        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(Settings.AimLock.AimPart) then
                local targetPart = player.Character[Settings.AimLock.AimPart]
                local distance = (Camera.CFrame.Position - targetPart.Position).magnitude

                if distance < shortestDistance then
                    closestTarget = player
                    shortestDistance = distance
                end
            end
        end

        if closestTarget then
            AimAtTarget(closestTarget)
        end
    end
end)
