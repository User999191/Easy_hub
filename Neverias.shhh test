local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Settings for AimLock, BulletTrace, Airshot, and Dot
local Settings = {
    AimLock = {
        Enabled = false,
        AimLockKey = Enum.KeyCode.Q,
        Prediction = 0.2,
        AirshotPredictionMultiplier = 1.5,
        AimPart = "HumanoidRootPart",
        NotificationDuration = 2,
        ChanceHitPrediction = 0.8,
        HighChanceThreshold = 0.9,
        HitChance = 0.7
    },
    BulletTrace = {
        Enabled = true,
        Color = Color3.fromRGB(255, 0, 0),
        Thickness = 2,
        LineCount = 20,
        LineLength = 100
    },
    Airshot = {
        Enabled = true,
        BasePrediction = 0.1,
        AirshotAccuracyFactor = 1.2
    },
    DotSettings = {
        Enabled = true,
        DotColor = Color3.fromRGB(255, 0, 0),
        DotRadius = 5
    }
}

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "Nerverias.shhh"
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Create Main Frame with scrolling functionality
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 450, 0, 450)
mainFrame.Position = UDim2.new(0.5, -150, 0.5, -225)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Create a ScrollingFrame inside the MainFrame
local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Name = "ScrollingFrame"
scrollingFrame.Size = UDim2.new(1, -20, 1, -60)
scrollingFrame.Position = UDim2.new(0, 10, 0, 50)
scrollingFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
scrollingFrame.BorderSizePixel = 0
scrollingFrame.ScrollBarThickness = 8
scrollingFrame.Parent = mainFrame

-- Create UI elements inside ScrollingFrame
local uiElements = {}

-- Create Title
local title = Instance.new("TextLabel")
title.Name = "Title"
title.Size = UDim2.new(1, 0, 0, 40)
title.Position = UDim2.new(0, 0, 0, 0)
title.Text = "Nerverias.shhh"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextScaled = true
title.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
title.Parent = scrollingFrame

-- Create TextBoxes and Labels for Settings
local settingsLabels = {
    { Name = "HitChance", Position = UDim2.new(0, 25, 0, 50), Text = "Hit Chance: " },
    { Name = "HighChanceThreshold", Position = UDim2.new(0, 25, 0, 100), Text = "High Chance Threshold: " },
    { Name = "ChanceHitPrediction", Position = UDim2.new(0, 25, 0, 150), Text = "Chance Hit Prediction: " },
    { Name = "AirshotPrediction", Position = UDim2.new(0, 25, 0, 200), Text = "Airshot Prediction: " },
    { Name = "BasePrediction", Position = UDim2.new(0, 25, 0, 250), Text = "Base Prediction: " },
    { Name = "AirshotAccuracyFactor", Position = UDim2.new(0, 25, 0, 300), Text = "Airshot Accuracy Factor: " }
}

for _, labelInfo in ipairs(settingsLabels) do
    local label = Instance.new("TextLabel")
    label.Name = labelInfo.Name .. "Label"
    label.Size = UDim2.new(0, 200, 0, 30)
    label.Position = labelInfo.Position
    label.Text = labelInfo.Text .. tostring(Settings.AimLock[labelInfo.Name] or Settings.Airshot[labelInfo.Name] or "Not Set")
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextScaled = true
    label.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    label.Parent = scrollingFrame
end

-- Create TextBoxes for user input
local textBoxes = {
    { Name = "HitChance", Position = UDim2.new(0, 200, 0, 50), Text = tostring(Settings.AimLock.HitChance) },
    { Name = "HighChanceThreshold", Position = UDim2.new(0, 200, 0, 100), Text = tostring(Settings.AimLock.HighChanceThreshold) },
    { Name = "ChanceHitPrediction", Position = UDim2.new(0, 200, 0, 150), Text = tostring(Settings.AimLock.ChanceHitPrediction) },
    { Name = "AirshotPrediction", Position = UDim2.new(0, 200, 0, 200), Text = tostring(Settings.Airshot.BasePrediction) },
    { Name = "BasePrediction", Position = UDim2.new(0, 200, 0, 250), Text = tostring(Settings.Airshot.BasePrediction) },
    { Name = "AirshotAccuracyFactor", Position = UDim2.new(0, 200, 0, 300), Text = tostring(Settings.Airshot.AirshotAccuracyFactor) }
}

for _, boxInfo in ipairs(textBoxes) do
    local textBox = Instance.new("TextBox")
    textBox.Name = boxInfo.Name .. "TextBox"
    textBox.Size = UDim2.new(0, 80, 0, 30)
    textBox.Position = boxInfo.Position
    textBox.Text = boxInfo.Text
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.TextScaled = true
    textBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    textBox.Parent = scrollingFrame

    -- Update settings when user types new values
    textBox.Changed:Connect(function(property)
        if property == "Text" then
            local value = tonumber(textBox.Text)
            if value then
                Settings.AimLock[boxInfo.Name] = value
                Settings.Airshot[boxInfo.Name] = value
                textBox.Parent:FindFirstChild(boxInfo.Name .. "Label").Text = boxInfo.Text .. tostring(value)
            end
        end
    end)
end

-- Create Toggle Button
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0, 100, 0, 40)
toggleButton.Position = UDim2.new(0.5, -50, 0, 10)
toggleButton.Text = "Hide"
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.TextScaled = true
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 150)
toggleButton.Parent = screenGui

-- Function to toggle UI visibility
local function toggleUI()
    if mainFrame.Visible then
        mainFrame.Visible = false
        toggleButton.Text = "Show"
    else
        mainFrame.Visible = true
        toggleButton.Text = "Hide"
    end
end

toggleButton.MouseButton1Click:Connect(toggleUI)

-- Create On and Off Buttons
local onButton = Instance.new("TextButton")
onButton.Name = "OnButton"
onButton.Size = UDim2.new(0, 120, 0, 40)
onButton.Position = UDim2.new(0, 25, 0, 350)
onButton.Text = "On"
onButton.TextColor3 = Color3.fromRGB(255, 255, 255)
onButton.TextScaled = true
onButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
onButton.Parent = scrollingFrame

local offButton = Instance.new("TextButton")
offButton.Name = "OffButton"
offButton.Size = UDim2.new(0, 120, 0, 40)
offButton.Position = UDim2.new(0, 150, 0, 350)
offButton.Text = "Off"
offButton.TextColor3 = Color3.fromRGB(255, 255, 255)
offButton.TextScaled = true
offButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
offButton.Parent = scrollingFrame

-- Function to handle On/Off button clicks
local function handleButtonClick(buttonName)
    if buttonName == "On" then
        -- Add logic for when On button is clicked
        print("On button clicked")
    elseif buttonName == "Off" then
        -- Add logic for when Off button is clicked
        print("Off button clicked")
    end
end

onButton.MouseButton1Click:Connect(function()
    handleButtonClick("On")
end)

offButton.MouseButton1Click:Connect(function()
    handleButtonClick("Off")
end)

-- Existing AimLock and Prediction Code
local LockedTarget
local targetDot = Drawing.new("Circle")

targetDot.Radius = Settings.DotSettings.DotRadius
targetDot.Color = Settings.DotSettings.DotColor
targetDot.Thickness = 1
targetDot.Filled = true
targetDot.Visible = false

-- Function to find the closest player
local function FindClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local screenPosition, isOnScreen = Camera:WorldToViewportPoint(rootPart.Position)
            
            if isOnScreen then
                local distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPosition.X, screenPosition.Y)).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- Function to create a line trace
local function createLineTrace(startPos, endPos)
    if Settings.BulletTrace.Enabled then
        local direction = (endPos - startPos).Unit
        local currentPos = startPos

        for i = 1, Settings.BulletTrace.LineCount do
            local lineEnd = currentPos + direction * Settings.BulletTrace.LineLength
            local line = Drawing.new("Line")
            line.From = Camera:WorldToViewportPoint(currentPos)
            line.To = Camera:WorldToViewportPoint(lineEnd)
            line.Color = Settings.BulletTrace.Color
            line.Thickness = Settings.BulletTrace.Thickness
            line.Visible = true

            Debris:AddItem(line, 0.5)
            currentPos = lineEnd
        end
    end
end

-- Function to calculate airshot prediction dynamically
local function CalculateAirshotPrediction(chance)
    local basePrediction = Settings.Airshot.BasePrediction
    local predictionMultiplier = Settings.Airshot.AirshotAccuracyFactor
    
    if chance >= Settings.AimLock.HighChanceThreshold then
        return basePrediction * predictionMultiplier
    else
        return basePrediction
    end
end

-- Function to determine if a shot will hit based on chance
local function ChanceHit()
    return math.random() <= Settings.AimLock.HitChance
end

-- Function to aim at the target with prediction
local function AimAtTarget(target)
    if target and target.Character and target.Character:FindFirstChild(Settings.AimLock.AimPart) then
        local targetPart = target.Character[Settings.AimLock.AimPart]
        local predictedPosition

        local airshotPrediction = Settings.Airshot.Enabled and CalculateAirshotPrediction(Settings.AimLock.ChanceHitPrediction) or Settings.AimLock.Prediction

        if target.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            local randomness = math.random() * 0.5
            predictedPosition = targetPart.Position + (targetPart.Velocity * (airshotPrediction + randomness))
        else
            predictedPosition = targetPart.Position + (targetPart.Velocity * Settings.AimLock.Prediction)
        end

        Camera.CFrame = CFrame.new(Camera.CFrame.Position, predictedPosition)
        createLineTrace(Camera.CFrame.Position, predictedPosition)

        if ChanceHit() then
            print("Hit at:", predictedPosition)
            -- Add actual shooting logic here
        else
            print("Missed shot at:", predictedPosition)
        end
    end
end

-- Handle key input for toggling aimlock and displaying dot
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Settings.AimLock.AimLockKey then
        Settings.AimLock.Enabled = not Settings.AimLock.Enabled

        if Settings.AimLock.Enabled then
            LockedTarget = FindClosestPlayer()
            if LockedTarget then
                local targetName = LockedTarget.Name
                LocalPlayer:SendNotification({
                    Title = "AimLock Activated",
                    Text = "Target: " .. targetName,
                    Duration = Settings.AimLock.NotificationDuration
                })
                targetDot.Visible = true
            else
                targetDot.Visible = false
            end
        else
            LockedTarget = nil
            targetDot.Visible = false
        end
    end
end)

-- Update aimlock each frame and dot position
RunService.Heartbeat:Connect(function()
    if Settings.AimLock.Enabled and LockedTarget then
        AimAtTarget(LockedTarget)

        if LockedTarget and LockedTarget.Character and LockedTarget.Character:FindFirstChild(Settings.AimLock.AimPart) then
            local targetPart = LockedTarget.Character[Settings.AimLock.AimPart]
            local screenPosition, isOnScreen = Camera:WorldToViewportPoint(targetPart.Position)

            if isOnScreen then
                targetDot.Position = Vector2.new(screenPosition.X, screenPosition.Y)
            end
        else
            targetDot.Visible = false
        end
    else
        targetDot.Visible = false
    end
end)
